# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['SelfSignedCertificateArgs', 'SelfSignedCertificate']

@pulumi.input_type
class SelfSignedCertificateArgs:
    def __init__(__self__, *,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 ecdsa_curve: Optional[pulumi.Input[str]] = None,
                 rsa_bits: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a SelfSignedCertificate resource.
        """
        if algorithm is not None:
            pulumi.set(__self__, "algorithm", algorithm)
        if ecdsa_curve is not None:
            pulumi.set(__self__, "ecdsa_curve", ecdsa_curve)
        if rsa_bits is not None:
            pulumi.set(__self__, "rsa_bits", rsa_bits)

    @property
    @pulumi.getter
    def algorithm(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "algorithm")

    @algorithm.setter
    def algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "algorithm", value)

    @property
    @pulumi.getter
    def ecdsa_curve(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "ecdsa_curve")

    @ecdsa_curve.setter
    def ecdsa_curve(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ecdsa_curve", value)

    @property
    @pulumi.getter
    def rsa_bits(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rsa_bits")

    @rsa_bits.setter
    def rsa_bits(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rsa_bits", value)


class SelfSignedCertificate(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 ecdsa_curve: Optional[pulumi.Input[str]] = None,
                 rsa_bits: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a SelfSignedCertificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[SelfSignedCertificateArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a SelfSignedCertificate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param SelfSignedCertificateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(SelfSignedCertificateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 algorithm: Optional[pulumi.Input[str]] = None,
                 ecdsa_curve: Optional[pulumi.Input[str]] = None,
                 rsa_bits: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = SelfSignedCertificateArgs.__new__(SelfSignedCertificateArgs)

            __props__.__dict__["algorithm"] = algorithm
            __props__.__dict__["ecdsa_curve"] = ecdsa_curve
            __props__.__dict__["rsa_bits"] = rsa_bits
            __props__.__dict__["ca_cert_pem"] = None
            __props__.__dict__["private_key"] = None
        super(SelfSignedCertificate, __self__).__init__(
            'banana:index:SelfSignedCertificate',
            resource_name,
            __props__,
            opts,
            remote=True)

    @property
    @pulumi.getter
    def ca_cert_pem(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ca_cert_pem")

    @property
    @pulumi.getter
    def private_key(self) -> pulumi.Output[str]:
        return pulumi.get(self, "private_key")

